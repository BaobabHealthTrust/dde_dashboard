<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>DDE Dashboard</title>
    <style>

    body {
      overflow: hidden;
    }

    .progress-meter .background-most {
      fill: #fff;
    }

    .progress-meter .background {
      fill: #ccc /*#ec8f21*/;
    }

    .progress-meter .foreground {
      fill: #6a91e1;
    }

    .progress-meter .foreground-red {
      fill: crimson;
    }

    .progress-meter .foreground-orange {
      fill: #ec8f21;
    }

    .progress-meter .foreground-green {
      fill: #3b9a44;
    }

    .progress-meter .foreground-blue {
      fill: #1954cd;
    }

    .progress-meter .foreground-gray {
      fill: #666;
    }

    .progress-meter text {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 9px;
      font-weight: bold;
    }

    .link {
      fill: none;
      stroke: #666;
      stroke-width: 1.5px;
    }

    path.link {
        fill: none;
        stroke: #666;
        stroke-width: 1.5px;
    }
    marker#licensing {
        fill: green;
    }
    path.link.licensing {
        stroke: green;
    }
    path.link.resolved {
        stroke-dasharray: 0, 2 1;
    }
    circle {
        fill: #ccc;
        stroke: #333;
        stroke-width: 1.5px;
    }
    text {
        font: 10px sans-serif;
        pointer-events: none;
    }
    text.shadow {
        stroke: #fff;
        stroke-width: 3px;
        stroke-opacity: .8;
    }

    </style>
  </head>
  <body onresize="resizeSVG()">
	  
	  <div id="main" style="padding: 0px; text-align: center; height: 1000px; overflow: hidden;"></div>
	  
      <script src="/javascripts/d3.js" charset="utf-8"></script>
      <script src="/javascripts/bowser.js" charset="utf-8"></script>
      <script>
            
      var zoomlevel = 1;

      var red = "crimson";
      var green = "#3b9a44";
      var blue = "#1954cd";
      var orange = "#ec8f21";
      var gray = "#666";
        
      var lineData = [];
      var lnData = [];
      var lineGraph = {};
      var foreground = {};
      var text = {};
      var meter = {};

      var oradius = 17;
      var arc = d3.svg.arc()
          .startAngle(0)
          .innerRadius(12)
          .outerRadius(oradius);   
      var twoPi = 2 * Math.PI,
          progress = 0,
          formatPercent = d3.format(".0%");
         
      var connections = <%= @connections.to_json.html_safe %>; 
      var sites = <%= @sites.to_json.html_safe %>;
            
      var spacing = 10;   
      var pollInterval = spacing * 1000;
      var timerHnd;

      var loader = d3.xml("images/mw.svg", function(xml) {
        document.getElementById("main").appendChild(xml.documentElement);
          
        var svg = d3.select("#region")
                    .style("margin", "auto");
           
        var tsvg = svg.append("g")
            .attr("transform", "translate(355,25)")
            
        tsvg.append("text")
              .attr("text-anchor", "middle")
              .attr("dy", ".75em")
              .attr("fill", "green")
              .style("font-size", "24px")
              .text("National Patient");
          
        tsvg.append("text")
              .attr("text-anchor", "middle")
              .attr("dy", ".75em")
              .attr("fill", "green")
              .style("font-size", "24px")
              .text("Identifiers")
              .attr("transform", "translate(0,30)");
          
        tsvg.append("text")
              .attr("text-anchor", "middle")
              .attr("dy", ".75em")
              .attr("fill", "black")
              .style("font-size", "24px")
              .text("Sync Status")
              .attr("transform", "translate(0,60)");
          
        tsvg.append("rect")
                .style("stroke", "green")
                .style("stroke-width", "1px")
                .style("fill", "none")
                .attr("width", 197)
                .attr("height", 110)
                .attr("x", -98)
                .attr("y", -15)  
          
        var lsvg = svg.append("g")
            .attr("transform", "translate(5,725)")
            
        lsvg.append("rect")
                .style("stroke", "green")
                .style("stroke-width", "1px")
                .style("fill", "rgba(0,255,0,0.1)")
                .attr("width", 150)
                .attr("height", 30)
                .attr("x", -5)
                .attr("y", -20)  
          
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "green")
              .style("font-size", "18px")
              .text("Legend");
          
        lsvg.append("rect")
                .style("stroke", "green")
                .style("stroke-width", "1px")
                .style("fill", "none")
                .attr("width", 150)
                .attr("height", 220)
                .attr("x", -5)
                .attr("y", -20)  
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", gray)
                .attr("width", 25)
                .attr("height", 20)
                .attr("x", 1)
                .attr("y", 15)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text("< 5% or Offline")
              .attr("transform", "translate(30,30)");
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", red)
                .attr("width", 25)
                .attr("height", 20)
                .attr("x", 1)
                .attr("y", 45)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text(">=5% & <25%")
              .attr("transform", "translate(30,60)");
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", orange)
                .attr("width", 25)
                .attr("height", 20)
                .attr("x", 1)
                .attr("y", 75)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text(">=25% & <50%")
              .attr("transform", "translate(30,90)");
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", blue)
                .attr("width", 25)
                .attr("height", 20)
                .attr("x", 1)
                .attr("y", 105)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text(">=50% & <75%")
              .attr("transform", "translate(30,120)");
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", green)
                .attr("width", 25)
                .attr("height", 20)
                .attr("x", 1)
                .attr("y", 135)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text(">=75%")
              .attr("transform", "translate(30,150)");
          
        lsvg.append("rect")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", "red")
                .attr("width", 15)
                .attr("height", 15)
                .attr("x", 5)
                .attr("y", 160)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text("Master Node")
              .attr("transform", "translate(30,172)");
          
        lsvg.append("circle")
                .style("stroke", "none")
                .style("stroke-width", "1px")
                .style("fill", "red")
                .attr("r", 6)
                .attr("cx", 13)
                .attr("cy", 187)  
                
        lsvg.append("text")
              .attr("text-anchor", "left")
              .attr("fill", "black")
              .style("font-size", "12px")
              .text("Proxy Node")
              .attr("transform", "translate(30,192)");
             
        setTimeout("ajaxTasks()", 500);  
          
        resizeSVG();
        
        // loadProgress();

        // loadSites();
      });
       
      function loadSites(){

        d3.selectAll("rect.site").remove();
        
        d3.selectAll("circle.site").remove();

        for(var i = 0; i < sites.length; i++){
          var xs = -10;
          var ys = -10;
          
          var xt = -10;
          var yt = -10;
          
          if(sites[i]["x"] != null && sites[i]["y"] != null){
            if(sites[i]["region"].toLowerCase() == "centre"){
              
              xs = Math.round(sites[i]["x"]);
              ys = Math.round(sites[i]["y"]) + 373;                
              
            } else if(sites[i]["region"].toLowerCase() == "north"){
            
              xs = Math.round(sites[i]["x"]) + 39
              ys = Math.round(sites[i]["y"])                
              
            } else if(sites[i]["region"].toLowerCase() == "south"){
            
              xs = Math.round(sites[i]["x"]) + 212
              ys = Math.round(sites[i]["y"]) + 552                
              
            }
          }
        
          if(d3.select("#" + sites[i]["site_code"].toLowerCase())[0][0] == null){
            if(sites[i]["type"].toLowerCase() == "master"){
              d3.select("#region").append("rect")
                .style("stroke", "white")
                .style("stroke-width", "1px")
                .style("fill", "red")
                .style("margin", "auto")
                .attr("class", "site")
                .attr("width", 15)
                .attr("height", 15)
                .attr("x", xs - 7.5)
                .attr("y", ys - 7.5)
                .attr("id", sites[i]["site_code"].toLowerCase())
                .attr("tag", sites[i]["name"])
                .on("mouseover", function(){
                    d3.select("#" + this.id).attr("r", 6).style("z-index", "100")
                        .style("fill", "#537ee0"); 
                    return tooltip.style("visibility", "visible");
                  })
                .on("mousemove", function(){
                    return tooltip.style("top", 
                        (d3.event.pageY-10)+"px")
                          .style("left", (d3.event.pageX+20)+"px")
                          .text(getSiteInfo(this.id));
                  })
                .on("mouseout", function(){
                    d3.select("#" + this.id).attr("r", 6).style("z-index", "10")
                        .style("fill", "red"); 
                    return tooltip.style("visibility", "hidden");
                  });
             } else {
                d3.select("#region").append("circle")
                  .style("stroke", "white")
                  .style("stroke-width", "1px")
                  .style("fill", "red")
                  .style("margin", "auto")
                  .attr("class", "site")
                  .attr("r", 6)
                  .attr("cx", xs)
                  .attr("cy", ys)
                  .attr("id", sites[i]["site_code"].toLowerCase())
                  .attr("tag", sites[i]["name"])
                  .on("mouseover", function(){
                      d3.select("#" + this.id).attr("r", 6).style("z-index", "100")
                          .style("fill", "#537ee0"); 
                      return tooltip.style("visibility", "visible");
                    })
                  .on("mousemove", function(){
                      return tooltip.style("top", 
                          (d3.event.pageY-10)+"px")
                            .style("left", (d3.event.pageX+20)+"px")
                            .text(getSiteInfo(this.id));
                    })
                  .on("mouseout", function(){
                      d3.select("#" + this.id).attr("r", 6).style("z-index", "10")
                          .style("fill", "red"); 
                      return tooltip.style("visibility", "hidden");
                    });
             }
          }        
        }
      }

      function loadProgress(){
        
        d3.selectAll("g.progress-meter").remove()
        
        d3.selectAll("path.progress-meter").remove();
        
        lineData = [];
        lnData = [];
        lineGraph = {};
        foreground = {};
        text = {};
        meter = {};
        
        for(var i = 0; i < connections.length; i++){  
          var xs = -10;
          var ys = -10;
          
          var xt = -10;
          var yt = -10;
          
          if(connections[i]["source"]["x"] != null && connections[i]["source"]["y"] != null){
            if(connections[i]["source"]["region"].toLowerCase() == "centre"){
              
              xs = Math.round(connections[i]["source"]["x"]);
              ys = Math.round(connections[i]["source"]["y"]) + 373;                
              
            } else if(connections[i]["source"]["region"].toLowerCase() == "north"){
            
              xs = Math.round(connections[i]["source"]["x"]) + 39
              ys = Math.round(connections[i]["source"]["y"])                
              
            } else if(connections[i]["source"]["region"].toLowerCase() == "south"){
            
              xs = Math.round(connections[i]["source"]["x"]) + 212
              ys = Math.round(connections[i]["source"]["y"]) + 552                
              
            }
          }
        
          if(connections[i]["target"]["x"] != null && connections[i]["target"]["y"] != null){
            if(connections[i]["target"]["region"].toLowerCase() == "centre"){
              
              xt = Math.round(connections[i]["target"]["x"]);
              yt = Math.round(connections[i]["target"]["y"]) + 373;                
              
            } else if(connections[i]["target"]["region"].toLowerCase() == "north"){
            
              xt = Math.round(connections[i]["target"]["x"]) + 39
              yt = Math.round(connections[i]["target"]["y"])                
              
            } else if(connections[i]["target"]["region"].toLowerCase() == "south"){
            
              xt = Math.round(connections[i]["target"]["x"]) + 212
              yt = Math.round(connections[i]["target"]["y"]) + 552                
              
            }
          }
            
          lnData.push(
              {
                source:{
                  x: xs,
                  y: ys,
                  ntype: connections[i]["source"]["type"]
                },
                target:{
                  x: xt,
                  y: yt,
                  ntype: connections[i]["target"]["type"]
                },
                label: connections[i]["label"],
                data: (connections[i]["status"]["npid"] != undefined ? (parseInt(connections[i]["status"]["npid"]["progress"]) / 100) : 0)
              }
           );
         }
         
         var svg = d3.select("#region");
          
         svg.append("svg:marker")
          .attr("id", "arrow")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 8)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z");

         svg.append("svg:marker")
          .attr("id", "arrow-crimson")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", "crimson");

         svg.append("svg:marker")
          .attr("id", "arrow-olivedrab")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", "olivedrab");

         svg.append("svg:marker")
          .attr("id", "arrow-orange")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", orange);

         svg.append("svg:marker")
          .attr("id", "arrow-blue")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", blue);

         svg.append("svg:marker")
          .attr("id", "arrow-green")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", green);

         svg.append("svg:marker")
          .attr("id", "arrow-red")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", red);

         svg.append("svg:marker")
          .attr("id", "arrow-gray")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 12)
          .attr("refY", 5)
          .attr("markerUnits", "strokeWidth")
          .attr("markerWidth", 4)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z")
          .attr("fill", gray);

        for(var i = 0; i < lnData.length; i++){
          //The line SVG Path we draw
          lineGraph[lnData[i].label.toLowerCase() + "-conn"] = svg.append("path")
              .attr("d", linkArc(lnData[i]))   // lineFunction(lineData))
              .attr("stroke", (lnData[i].source.ntype == "master" && lnData[i].target.ntype != "master" ? "olivedrab" : "#db810d"))
              .attr("stroke-width", (lnData[i].source.ntype == "master" && lnData[i].target.ntype == "master" ? 5 : 3))
              .attr("fill", "none")
              .attr("marker-end", "url(#arrow-" + (lnData[i].source.ntype == "master" && lnData[i].target.ntype != "master" ? "olivedrab" : "orange") + ")")
              .attr("id", lnData[i].label.toLowerCase() + "-conn")
              .attr("tag", lnData[i].label + " Connection")
              .attr("class", "progress-meter")
              .on("mouseover", function(){
                  return tooltip.style("visibility", "visible");
                })
              .on("mousemove", function(){
                  return tooltip.style("top", 
                      (d3.event.pageY-10)+"px")
                        .style("left", (d3.event.pageX+20)+"px")
                        .text(getSiteInfo(this.id));
                })
              .on("mouseout", function(){
                  return tooltip.style("visibility", "hidden");
                })
              .on("click", function(){
                alert(this.id);
              });          
        }

        var svg = d3.select("#region");
            
        var barc = d3.svg.arc()
            .startAngle(0)
            .innerRadius(0)
            .outerRadius(oradius + 1);

        for(var i = 0; i < lnData.length; i++){        
         
          var point = d3.select("#" + lnData[i].label.toLowerCase() + "-conn").node();
          
          var mpoint = point.getPointAtLength(point.getTotalLength() / 2);
             
          var isvg = svg.append("g")
            .attr("transform", "translate(" + mpoint.x + "," + mpoint.y + ")")
                
          meter[lnData[i].label.toLowerCase() + "-conn"] = isvg.append("g")
          .attr("class", "progress-meter");

          meter[lnData[i].label.toLowerCase() + "-conn"].append("path")
              .attr("class", "background-most")
              .attr("d", barc.endAngle(twoPi));

          meter[lnData[i].label.toLowerCase() + "-conn"].append("path")
              .attr("class", "background")
              .attr("d", arc.endAngle(twoPi));

          foreground[lnData[i].label.toLowerCase() + "-conn"] = meter[lnData[i].label.toLowerCase() + "-conn"].append("path")
              .attr("class", "foreground");

          text[lnData[i].label.toLowerCase() + "-conn"] = meter[lnData[i].label.toLowerCase() + "-conn"].append("text")
              .attr("text-anchor", "middle")
              .attr("dy", ".35em")
              .attr("fill", "crimson");
              
          var pos = lnData[i]["data"];    // Math.random();
              
          setPosition(lnData[i].label.toLowerCase() + "-conn", pos);
          
        }
        
        loadSites();
      }
           
      function setPosition(id, pos){
        if(pos >= 0.75){
        
          lineGraph[id].attr("stroke", green)
            .attr("marker-end", "url(#arrow-green");
        
          text[id].attr("fill", green);
          
          foreground[id].attr("class", "foreground-green");
        
        } else if(pos >= 0.50 && pos < 0.75){
        
          lineGraph[id].attr("stroke", blue)
            .attr("marker-end", "url(#arrow-blue");
        
          text[id].attr("fill", blue);
          
          foreground[id].attr("class", "foreground-blue");
        
        } else if(pos >= 0.25 && pos < 0.50){
        
          lineGraph[id].attr("stroke", orange)
            .attr("marker-end", "url(#arrow-orange");
        
          text[id].attr("fill", orange);
          
          foreground[id].attr("class", "foreground-orange");
        
        } else if(pos >= 0.05 && pos < 0.25){
        
          lineGraph[id].attr("stroke", red)
            .attr("marker-end", "url(#arrow-red");
        
          text[id].attr("fill", red);
          
          foreground[id].attr("class", "foreground-red");
        
        } else {
        
          lineGraph[id].attr("stroke", gray)
            .attr("marker-end", "url(#arrow-gray");
        
          text[id].attr("fill", gray);
          
          foreground[id].attr("class", "foreground-gray");
        
        }
        
        foreground[id].attr("d", arc.endAngle(twoPi * pos));
        text[id].text(formatPercent(pos));
      }
       
      function linkArc(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
      }
         
      var tooltip = d3.select("body")
        .append("div")
        .style("position", "absolute")
        .style("z-index", "10")
        .style("visibility", "hidden")
        .style("background", "#f6f3d7")
        .style("padding", "5px")
        .style("border", "1px solid #000")
        .style("border-radius", "5px")
        .text("Tooltip");

      function getSiteInfo(id){
        var result = id;
        
        if(document.getElementById(id)){
          result = document.getElementById(id).getAttribute("tag");
        } 
        
        return result;
      }

      function resizeMap(){
        zoomlevel = 0.65;
        
        d3.select('#region').attr('transform','scale(' + zoomlevel + ')');
      }
         
      function toTaskDate(timestamp) {
        var d = new Date(timestamp * 1000);
        var hours = d.getHours(), min = d.getMinutes(), secs = d.getSeconds();
        var year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();

        return String(year) + "-" + (month < 10 ? "0" + month : month) + "-" +
          day + " " + (hours < 10 ? "0" + hours : hours) + ":" +
          (min < 10 ? "0" + min : min) + ":" + (secs < 10 ? "0" + secs : secs);
      }
       
      function ajaxTasks(){
         clearTimeout(timerHnd);
         
         var url = "/ajax_connections";
         
         var httpRequest = new XMLHttpRequest();
          httpRequest.onreadystatechange = function() {
              handleTasks(httpRequest);
          };
          try {
              httpRequest.open('GET', url, true);
              httpRequest.send(null);
          } catch(e){
          }
      }

      function handleTasks(aXMLHttpRequest) {
        if (!aXMLHttpRequest) return;                    

        if (aXMLHttpRequest.readyState == 4 && (aXMLHttpRequest.status == 200 || 
              aXMLHttpRequest.status == 304)) {
                     
          try{
            var result = JSON.parse(aXMLHttpRequest.responseText);
                          
            connections = result["connections"];
            
            sites = result["sites"];
            
            loadProgress();
            
          } catch(e){
          }
         
          timerHnd = setTimeout("ajaxTasks()", pollInterval);           
        }
      }
      
      function __$(id){
		return document.getElementById(id);
	  }
      
      function resizeSVG(){
		  
		if(__$("main")){
			
			__$("main").style.height = (window.innerHeight) + "px";
			
		} 
		 
      }
       
      </script>
  </body>
</html>
